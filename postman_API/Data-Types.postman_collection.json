{
	"info": {
		"_postman_id": "f9ab7ace-3385-497b-8968-42574c2627ca",
		"name": "Data-Types",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get the Data Types",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0a385e78-bf2c-4cc0-af7a-06892f8f7cf1",
						"type": "text/javascript",
						"exec": [
							"eval(globals.status_code_ok)();",
							"eval(globals.response_time_limit)();",
							"",
							"var data = JSON.parse(responseBody);",
							"var payload = data.payload;",
							"var errors = data.errors;",
							"var metaData = data.metaData;",
							"",
							"eval(globals.validate_response)(data);",
							"tests[\"Response payload is an Array (payload = [])\"] = Array.isArray(payload);",
							"tests[\"Response errors is empty (errors = [])\"] = errors.length === 0;",
							"tests[\"Response metaData attributes match contract structure\"] = metaData.page === 1 && metaData.pageSize === 5 && metaData.sort === \"code\" && metaData.direction === \"ASC\" && metaData.filters.length === 0;"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/api/dataTypes?page=1&pageSize=5",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"dataTypes"
					],
					"query": [
						{
							"key": "page",
							"value": "1"
						},
						{
							"key": "pageSize",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get the Data Types list with not valid filter",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4e5b7dee-b1f3-46dd-a120-df2df42438e5",
						"type": "text/javascript",
						"exec": [
							"eval(globals.status_code_bad_request)();",
							"eval(globals.response_time_limit)();",
							"",
							"var data = JSON.parse(responseBody);",
							"var payload = data.payload;",
							"var errors = data.errors;",
							"var metaData = data.metaData;",
							"",
							"eval(globals.validate_response)(data);",
							"tests[\"Response payload is empty (payload = [])\"] = Array.isArray(payload) && payload.length === 0;",
							"tests[\"Response error code is ok (code = 110)\"] = errors[0].code === \"110\";",
							"tests[\"Response error message is ok (message = 'page must be equal or greater than 1')\"] = errors[0].message === \"page must be equal or greater than 1\";",
							"tests[\"Response metaData is empty (metaData = {})\"] = eval(globals.is_empty)(metaData);"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/api/dataTypes?page=0&pageSize=1",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"dataTypes"
					],
					"query": [
						{
							"key": "page",
							"value": "0"
						},
						{
							"key": "pageSize",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "POST the Data Type with the existing code",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f5885f1f-24b6-4b17-95c2-a6646b36b5f3",
						"type": "text/javascript",
						"exec": [
							"eval(globals.status_code_conflict)();",
							"eval(globals.response_time_limit)();",
							"",
							"var data = JSON.parse(responseBody);",
							"var payload = data.payload;",
							"var errors = data.errors;",
							"var metaData = data.metaData;",
							"",
							"eval(globals.validate_response)(data);",
							"tests[\"Response payload is empty (payload = [])\"] = Array.isArray(payload) && payload.length === 0;",
							"tests[\"Response error code is ok (code = 1)\"] = errors[0].code === \"1\";",
							"tests[\"Response error message is ok (message = 'The Type AAA already exists')\"] = errors[0].message === \"The Type AAA already exists\";",
							"tests[\"Response metaData is empty (metaData = {})\"] = eval(globals.is_empty)(metaData);"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"MyDataType11\",\n    \"code\": \"AAA\",\n    \"attributes\": [{\n        \"type\": \"Date\",\n        \"code\": \"CCC\",\n        \"name\": \"MyDate2\",\n        \"status\": \"0\",\n        \"roles\": [{\n            \"code\": \"firstCode\",\n            \"descr\": \"firstCode\"\n        },{\n            \"code\": \"secondCode\",\n            \"descr\": \"secondDescr\"\n        }],\n        \"disablingCodes\": [\n            \"firstDisablingCode\",\n            \"secondDisablingCode\"\n        ],\n        \"mandatory\": true,\n        \"listFilter\": true,\n        \"indexable\": true,\n        \"enumeratorStaticItems\": null,\n        \"enumeratorStaticItemsSeparator\": null,\n        \"enumeratorExtractorBean\": null,\n        \"validationRules\": {\n            \"ognlValidation\": {\n                \"ognlExpression\": \"expression\",\n                \"applyOnlyToFilledAttr\": false,\n                \"helpMessage\": \"Help message\",\n                \"keyForHelpMessage\": null,\n                \"errorMessage\": \"Error Message\",\n                \"keyForErrorMessage\": null\n            },\n            \"minLength\": null,\n            \"maxLength\": null,\n            \"regex\": null,\n            \"rangeStartString\": null,\n            \"rangeEndString\": null,\n            \"rangeStartStringAttribute\": null,\n            \"rangeEndStringAttribute\": null,\n            \"equalString\": null,\n            \"equalStringAttribute\": null,\n            \"rangeStartDate\": null,\n            \"rangeEndDate\": null,\n            \"rangeStartDateAttribute\": null,\n            \"rangeEndDateAttribute\": null,\n            \"equalDate\": null,\n            \"equalDateAttribute\": null,\n            \"rangeStartNumber\" : null,\n                \"rangeStartNumberAttribute\" : null,\n            \"rangeEndNumber\" : null,\n            \"rangeEndNumberAttribute\" : null,\n            \"equalNumber\" : null,\n            \"equalNumberAttribute\" : null\n        },\n        \"nestedAttribute\": null,\n        \"compositeAttributes\": null\n    }],\n      \"viewPage\": null,\n      \"listModel\": null,\n      \"defaultModel\": null\n}"
				},
				"url": {
					"raw": "{{url}}/api/dataTypes",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"dataTypes"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST the new Data Type",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c5b1d5ae-cea8-4427-b873-d1fdfc76b70d",
						"type": "text/javascript",
						"exec": [
							"eval(globals.status_code_ok)();",
							"eval(globals.response_time_limit)();",
							"",
							"var data = JSON.parse(responseBody);",
							"var payload = data.payload;",
							"var errors = data.errors;",
							"var metaData = data.metaData;",
							"",
							"eval(globals.validate_response)(data);",
							"tests[\"Data Type code is JJJ\"] = payload.code === \"JJJ\";",
							"tests[\"Response errors is empty (errors = [])\"] = errors.length === 0;",
							"tests[\"Response meta data is empty (metaData = {})\"] = eval(globals.is_empty)(metaData);"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"MyDataType5\",\n    \"code\": \"JJJ\",\n    \"attributes\": [{\n        \"type\": \"Date\",\n        \"code\": \"FFF\",\n        \"name\": \"MyDate3\",\n        \"status\": \"0\",\n        \"roles\": [{\n            \"code\": \"firstCode\",\n            \"descr\": \"firstCode\"\n        },{\n            \"code\": \"secondCode\",\n            \"descr\": \"secondDescr\"\n        }],\n        \"disablingCodes\": [\n            \"firstDisablingCode\",\n            \"secondDisablingCode\"\n        ],\n        \"mandatory\": true,\n        \"listFilter\": true,\n        \"indexable\": true,\n        \"enumeratorStaticItems\": null,\n        \"enumeratorStaticItemsSeparator\": null,\n        \"enumeratorExtractorBean\": null,\n        \"validationRules\": {\n            \"ognlValidation\": {\n                \"ognlExpression\": \"expression\",\n                \"applyOnlyToFilledAttr\": false,\n                \"helpMessage\": \"Help message\",\n                \"keyForHelpMessage\": null,\n                \"errorMessage\": \"Error Message\",\n                \"keyForErrorMessage\": null\n            },\n            \"minLength\": null,\n            \"maxLength\": null,\n            \"regex\": null,\n            \"rangeStartString\": null,\n            \"rangeEndString\": null,\n            \"rangeStartStringAttribute\": null,\n            \"rangeEndStringAttribute\": null,\n            \"equalString\": null,\n            \"equalStringAttribute\": null,\n            \"rangeStartDate\": null,\n            \"rangeEndDate\": null,\n            \"rangeStartDateAttribute\": null,\n            \"rangeEndDateAttribute\": null,\n            \"equalDate\": null,\n            \"equalDateAttribute\": null,\n            \"rangeStartNumber\" : null,\n                \"rangeStartNumberAttribute\" : null,\n            \"rangeEndNumber\" : null,\n            \"rangeEndNumberAttribute\" : null,\n            \"equalNumber\" : null,\n            \"equalNumberAttribute\" : null\n        },\n        \"nestedAttribute\": null,\n        \"compositeAttributes\": null\n    }],\n      \"viewPage\": null,\n      \"listModel\": null,\n      \"defaultModel\": null\n}"
				},
				"url": {
					"raw": "{{url}}/api/dataTypes",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"dataTypes"
					]
				}
			},
			"response": []
		}
	]
}