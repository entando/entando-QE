{
	"info": {
		"_postman_id": "da59aeec-fcca-3d69-e95c-d5f33c63a602",
		"name": "Data-Type",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Read Data Type with code",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3464dae6-0aaf-467d-9ecc-3ea7ee133113",
						"type": "text/javascript",
						"exec": [
							"eval(globals.status_code_ok)();",
							"eval(globals.response_time_limit)();",
							"",
							"var data = JSON.parse(responseBody);",
							"var body = data.payload;",
							"var errors = data.errors;",
							"var metaData = data.metaData;",
							"",
							"eval(globals.validate_response)(data);",
							"tests[\"Data Type code is AAA\"] = body.code === \"AAA\";",
							"tests[\"Response errors is empty (errors = [])\"] = errors.length === 0;",
							"tests[\"Response meta data is empty (metaData = {})\"] = eval(globals.is_empty)(metaData);",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer  {{access_token}}"
					}
				],
				"body": {},
				"url": {
					"raw": "{{url}}/api/dataTypes/AAA",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"dataTypes",
						"AAA"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read Data Type with unexisting code",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "48799bfa-d267-46c2-99cd-b21bf8f33e8c",
						"type": "text/javascript",
						"exec": [
							"eval(globals.status_code_not_found)();",
							"eval(globals.response_time_limit)();",
							"",
							"var data = JSON.parse(responseBody);",
							"var payload = data.payload;",
							"var errors = data.errors;",
							"var metaData = data.metaData;",
							"",
							"eval(globals.validate_response)(data);",
							"tests[\"Response payload is empty (payload = [])\"] = Array.isArray(payload) && payload.length === 0;",
							"tests[\"Response errors is not empty\"] = errors.length > 0;",
							"tests[\"Response error status code = 1\"] = errors[0].code === \"1\";",
							"tests[\"Response error message is not empty\"] = errors[0].message !== \"\";"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					}
				],
				"body": {},
				"url": {
					"raw": "{{url}}/api/dataTypes/unexistingcode",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"dataTypes",
						"unexistingcode"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Data Type with code",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "218982e3-c8dc-491e-ada2-088026e3050d",
						"type": "text/javascript",
						"exec": [
							"eval(globals.status_code_ok)();",
							"eval(globals.response_time_limit)();",
							"",
							"var data = JSON.parse(responseBody);",
							"var body = data.payload;",
							"var errors = data.errors;",
							"var metaData = data.metaData;",
							"",
							"eval(globals.validate_response)(data);",
							"tests[\"Data Type name is 'MyDataType'\"] = body.name === \"MyDataType\";",
							"tests[\"Response errors is empty (errors = [])\"] = errors.length === 0;",
							"tests[\"Response meta data is empty (metaData = {})\"] = eval(globals.is_empty)(metaData);"
						]
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n        \"name\": \"MyDataType\",\n        \"code\": \"BBB\",\n        \"attributes\": [{\n            \"type\": \"Date\",\n            \"code\": \"DDD\",\n            \"name\": \"MyDate\",\n            \"roles\": [],\n            \"mandatory\": true,\n            \"listFilter\": true,\n            \"indexable\": true,\n            \"enumeratorStaticItems\": null,\n            \"enumeratorStaticItemsSeparator\": null,\n            \"enumeratorExtractorBean\": null,\n            \"validationRules\": {\n                    \"ognlValidation\": {\n                        \"ognlExpression\": \"expression\",\n                        \"applyOnlyToFilledAttr\": false,\n                        \"helpMessage\": \"Help message\",\n                        \"keyForHelpMessage\": null,\n                        \"errorMessage\": \"Error Message\",\n                        \"keyForErrorMessage\": null\n                    },\n                    \"minLength\": null,\n                    \"maxLength\": null,\n                    \"regex\": null,\n                    \"rangeStartString\": null,\n                    \"rangeEndString\": null,\n                    \"rangeStartStringAttribute\": null,\n                    \"rangeEndStringAttribute\": null,\n                    \"equalString\": null,\n                    \"equalStringAttribute\": null,\n                    \"rangeStartDate\": null,\n                    \"rangeEndDate\": null,\n                    \"rangeStartDateAttribute\": null,\n                    \"rangeEndDateAttribute\": null,\n                    \"equalDate\": null,\n                    \"equalDateAttribute\": null,\n                    \"rangeStartNumber\" : null,\n                     \"rangeStartNumberAttribute\" : null,\n                    \"rangeEndNumber\" : null,\n                    \"rangeEndNumberAttribute\" : null,\n                    \"equalNumber\" : null,\n                    \"equalNumberAttribute\" : null\n            },\n            \"nestedAttribute\": null,\n            \"compositeAttributes\": null\n        }],\n        \"viewPage\": null,\n        \"listModel\": null,\n        \"defaultModel\": null\n    }"
				},
				"url": {
					"raw": "{{url}}/api/dataTypes/BBB",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"dataTypes",
						"BBB"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Data Type with unexisting code",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fcdf59d2-abfc-46bd-8c74-dcbb0866ca7d",
						"type": "text/javascript",
						"exec": [
							"eval(globals.status_code_not_found)();",
							"eval(globals.response_time_limit)();",
							"",
							"var data = JSON.parse(responseBody);",
							"var payload = data.payload;",
							"var errors = data.errors;",
							"var metaData = data.metaData;",
							"",
							"eval(globals.validate_response)(data);",
							"tests[\"Response payload is empty (payload = [])\"] = Array.isArray(payload) && payload.length === 0;",
							"tests[\"Response errors is not empty\"] = errors.length > 0;",
							"tests[\"Response error status code = 1\"] = errors[0].code === \"1\";",
							"tests[\"Response error message is not empty\"] = errors[0].message !== \"\";"
						]
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n        \"name\": \"MyDataType\",\n        \"code\": \"XXX\",\n        \"attributes\": [{\n            \"type\": \"Date\",\n            \"code\": \"DDD\",\n            \"name\": \"MyDate\",\n            \"roles\": [],\n            \"mandatory\": true,\n            \"listFilter\": true,\n            \"indexable\": true,\n            \"enumeratorStaticItems\": null,\n            \"enumeratorStaticItemsSeparator\": null,\n            \"enumeratorExtractorBean\": null,\n            \"validationRules\": {\n                    \"ognlValidation\": {\n                        \"ognlExpression\": \"expression\",\n                        \"applyOnlyToFilledAttr\": false,\n                        \"helpMessage\": \"Help message\",\n                        \"keyForHelpMessage\": null,\n                        \"errorMessage\": \"Error Message\",\n                        \"keyForErrorMessage\": null\n                    },\n                    \"minLength\": null,\n                    \"maxLength\": null,\n                    \"regex\": null,\n                    \"rangeStartString\": null,\n                    \"rangeEndString\": null,\n                    \"rangeStartStringAttribute\": null,\n                    \"rangeEndStringAttribute\": null,\n                    \"equalString\": null,\n                    \"equalStringAttribute\": null,\n                    \"rangeStartDate\": null,\n                    \"rangeEndDate\": null,\n                    \"rangeStartDateAttribute\": null,\n                    \"rangeEndDateAttribute\": null,\n                    \"equalDate\": null,\n                    \"equalDateAttribute\": null,\n                    \"rangeStartNumber\" : null,\n                     \"rangeStartNumberAttribute\" : null,\n                    \"rangeEndNumber\" : null,\n                    \"rangeEndNumberAttribute\" : null,\n                    \"equalNumber\" : null,\n                    \"equalNumberAttribute\" : null\n            },\n            \"nestedAttribute\": null,\n            \"compositeAttributes\": null\n        }],\n        \"viewPage\": null,\n        \"listModel\": null,\n        \"defaultModel\": null\n    }"
				},
				"url": {
					"raw": "{{url}}/api/dataTypes/XXX",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"dataTypes",
						"XXX"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Data Type with a mismatching between URI and payload",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "49459376-d381-42b2-ba58-9c04b47ec1f0",
						"type": "text/javascript",
						"exec": [
							"eval(globals.status_code_bad_request)();",
							"eval(globals.response_time_limit)();",
							"",
							"var data = JSON.parse(responseBody);",
							"var payload = data.payload;",
							"var errors = data.errors;",
							"var metaData = data.metaData;",
							"",
							"eval(globals.validate_response)(data);",
							"tests[\"Response payload is empty (payload = [])\"] = Array.isArray(payload) && payload.length === 0;",
							"tests[\"Response errors is not empty\"] = errors.length > 0;",
							"tests[\"Response error status code = 6\"] = errors[0].code === \"6\";",
							"tests[\"Response error message is not empty\"] = errors[0].message !== \"\";"
						]
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n        \"name\": \"MyDataType\",\n        \"code\": \"TTT\",\n        \"attributes\": [{\n            \"type\": \"Date\",\n            \"code\": \"DDD\",\n            \"name\": \"MyDate\",\n            \"roles\": [],\n            \"mandatory\": true,\n            \"listFilter\": true,\n            \"indexable\": true,\n            \"enumeratorStaticItems\": null,\n            \"enumeratorStaticItemsSeparator\": null,\n            \"enumeratorExtractorBean\": null,\n            \"validationRules\": {\n                    \"ognlValidation\": {\n                        \"ognlExpression\": \"expression\",\n                        \"applyOnlyToFilledAttr\": false,\n                        \"helpMessage\": \"Help message\",\n                        \"keyForHelpMessage\": null,\n                        \"errorMessage\": \"Error Message\",\n                        \"keyForErrorMessage\": null\n                    },\n                    \"minLength\": null,\n                    \"maxLength\": null,\n                    \"regex\": null,\n                    \"rangeStartString\": null,\n                    \"rangeEndString\": null,\n                    \"rangeStartStringAttribute\": null,\n                    \"rangeEndStringAttribute\": null,\n                    \"equalString\": null,\n                    \"equalStringAttribute\": null,\n                    \"rangeStartDate\": null,\n                    \"rangeEndDate\": null,\n                    \"rangeStartDateAttribute\": null,\n                    \"rangeEndDateAttribute\": null,\n                    \"equalDate\": null,\n                    \"equalDateAttribute\": null,\n                    \"rangeStartNumber\" : null,\n                     \"rangeStartNumberAttribute\" : null,\n                    \"rangeEndNumber\" : null,\n                    \"rangeEndNumberAttribute\" : null,\n                    \"equalNumber\" : null,\n                    \"equalNumberAttribute\" : null\n            },\n            \"nestedAttribute\": null,\n            \"compositeAttributes\": null\n        }],\n        \"viewPage\": null,\n        \"listModel\": null,\n        \"defaultModel\": null\n    }"
				},
				"url": {
					"raw": "{{url}}/api/dataTypes/AAA",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"dataTypes",
						"AAA"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Data Type with mismatching between URI and payload",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7291ec1c-caf2-4a37-8a5d-8b328a0ba1c8",
						"type": "text/javascript",
						"exec": [
							"eval(globals.status_code_bad_request)();",
							"eval(globals.response_time_limit)();",
							"",
							"var data = JSON.parse(responseBody);",
							"var payload = data.payload;",
							"var errors = data.errors;",
							"var metaData = data.metaData;",
							"",
							"eval(globals.validate_response)(data);",
							"tests[\"Response payload is empty (payload = [])\"] = Array.isArray(payload) && payload.length === 0;",
							"tests[\"Response errors is not empty\"] = errors.length > 0;",
							"tests[\"Response error status code = 6\"] = errors[0].code === \"6\";",
							"tests[\"Response error message is not empty\"] = errors[0].message !== \"\";"
						]
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n        \"name\": \"MyDataType\",\n        \"code\": \"TTT\",\n        \"attributes\": [{\n            \"type\": \"Date\",\n            \"code\": \"DDD\",\n            \"name\": \"MyDate\",\n            \"roles\": [],\n            \"mandatory\": true,\n            \"listFilter\": true,\n            \"indexable\": true,\n            \"enumeratorStaticItems\": null,\n            \"enumeratorStaticItemsSeparator\": null,\n            \"enumeratorExtractorBean\": null,\n            \"validationRules\": {\n                    \"ognlValidation\": {\n                        \"ognlExpression\": \"expression\",\n                        \"applyOnlyToFilledAttr\": false,\n                        \"helpMessage\": \"Help message\",\n                        \"keyForHelpMessage\": null,\n                        \"errorMessage\": \"Error Message\",\n                        \"keyForErrorMessage\": null\n                    },\n                    \"minLength\": null,\n                    \"maxLength\": null,\n                    \"regex\": null,\n                    \"rangeStartString\": null,\n                    \"rangeEndString\": null,\n                    \"rangeStartStringAttribute\": null,\n                    \"rangeEndStringAttribute\": null,\n                    \"equalString\": null,\n                    \"equalStringAttribute\": null,\n                    \"rangeStartDate\": null,\n                    \"rangeEndDate\": null,\n                    \"rangeStartDateAttribute\": null,\n                    \"rangeEndDateAttribute\": null,\n                    \"equalDate\": null,\n                    \"equalDateAttribute\": null,\n                    \"rangeStartNumber\" : null,\n                     \"rangeStartNumberAttribute\" : null,\n                    \"rangeEndNumber\" : null,\n                    \"rangeEndNumberAttribute\" : null,\n                    \"equalNumber\" : null,\n                    \"equalNumberAttribute\" : null\n            },\n            \"nestedAttribute\": null,\n            \"compositeAttributes\": null\n        }],\n        \"viewPage\": null,\n        \"listModel\": null,\n        \"defaultModel\": null\n    }"
				},
				"url": {
					"raw": "{{url}}/api/dataTypes/ZZZ",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"dataTypes",
						"ZZZ"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete the Data Type with code",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "264aa584-9d13-4e65-a44e-5423fa906afe",
						"type": "text/javascript",
						"exec": [
							"eval(globals.status_code_ok)();",
							"eval(globals.response_time_limit)();",
							"",
							"var data = JSON.parse(responseBody);",
							"var payload = data.payload;",
							"var errors = data.errors;",
							"var metaData = data.metaData;",
							"",
							"eval(globals.validate_response)(data);",
							"tests[\"Response errors is empty (errors = [])\"] = errors.length === 0;",
							"tests[\"Response metaData is empty (metaData = {})\"] = eval(globals.is_empty)(metaData);"
						]
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/api/dataTypes/UUU",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"dataTypes",
						"UUU"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete the Data Type with unexisting code",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9b906e6f-5ace-4cc2-b517-b3bd6c88f79a",
						"type": "text/javascript",
						"exec": [
							"eval(globals.status_code_ok)();",
							"eval(globals.response_time_limit)();",
							"",
							"",
							"var data = JSON.parse(responseBody);",
							"var payload = data.payload;",
							"var errors = data.errors;",
							"var metaData = data.metaData;",
							"",
							"eval(globals.validate_response)(data);",
							"tests[\"Response errors is empty (errors = [])\"] = errors.length === 0;",
							"tests[\"Response metaData is empty (metaData = {})\"] = eval(globals.is_empty)(metaData);"
						]
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/api/dataTypes/ZZZ",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"dataTypes",
						"ZZZ"
					]
				}
			},
			"response": []
		}
	]
}