{
	"info": {
		"_postman_id": "eda73dec-ea31-fe92-ce38-d0dc7fe2b12f",
		"name": "Access-Token",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Access Token POST",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3101a187-1ea6-4842-9fa1-45c4920d9f53",
						"type": "text/javascript",
						"exec": [
							"var data = JSON.parse(responseBody);",
							"postman.setEnvironmentVariable(\"access_token\", data.access_token);",
							"postman.setEnvironmentVariable(\"refresh_token\", data.refresh_token);",
							"postman.setGlobalVariable(\"status_code_ok\", () => {",
							"    // Status code OK",
							"    pm.test(\"Status code is 200\", function(){",
							"       pm.response.to.have.status(200);",
							"    });",
							"});",
							"",
							"postman.setGlobalVariable(\"status_code_not_found\", () => {",
							"    // Status code not found",
							"    pm.test(\"Status code is 404\", function(){",
							"        pm.response.to.have.status(404);",
							"    });",
							"});",
							"",
							"postman.setGlobalVariable(\"status_code_bad_request\", () => {",
							"    // Status code bad request",
							"      pm.test(\"Status code is 400\", function(){",
							"        pm.response.to.have.status(400);",
							"    });",
							"});",
							"",
							"postman.setGlobalVariable(\"status_code_conflict\", () => {",
							"    // Status code bad request",
							"      pm.test(\"Status code is 409\", function(){",
							"        pm.response.to.have.status(409);",
							"    });",
							"});",
							"",
							"postman.setGlobalVariable(\"response_time_limit\", () => {",
							"    // The response time must be less than 200 milliseconds",
							"    pm.test(\"Response time is less than 200ms\", function () {",
							"        pm.expect(pm.response.responseTime).to.be.below(200);",
							"    });",
							"",
							"});",
							"",
							"postman.setGlobalVariable(\"validate_response\", (response) => {",
							"    var data_type_schema = JSON.parse(environment.data_type_schema);",
							"    pm.test(\"Response schema is valid\", function(){",
							"        pm.expect(tv4.validate(data, data_type_schema, true, true)).to.be.true;",
							"    });",
							"});",
							"",
							"postman.setGlobalVariable(\"is_empty\", (obj) => {",
							"   for(var prop in obj) {",
							"        if(obj.hasOwnProperty(prop))",
							"            return false;",
							"    }",
							"    return JSON.stringify(obj) === JSON.stringify({});",
							"});",
							"",
							"eval(globals.status_code_ok)();",
							"eval(globals.response_time_limit)();",
							"",
							"pm.test('Access Token is not blank', function(){",
							"    pm.expect(data.access_token).to.not.be.eql(\"\");",
							"});",
							"",
							"pm.test('Refresh Token is not blank', function(){",
							"    pm.expect(data.refresh_token).to.not.be.eql(\"\");",
							"});",
							"",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "username",
							"value": "admin",
							"type": "text"
						},
						{
							"key": "password",
							"value": "adminadmin",
							"type": "text"
						},
						{
							"key": "grant_type",
							"value": "password",
							"type": "text"
						},
						{
							"key": "client_id",
							"value": "REST_API",
							"type": "text"
						},
						{
							"key": "client_secret",
							"value": "REAST_API_SEC",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/OAuth2/access_token",
					"host": [
						"{{url}}"
					],
					"path": [
						"OAuth2",
						"access_token"
					]
				},
				"description": "Request to return the Access Token (based on Bearer Token)"
			},
			"response": []
		}
	]
}